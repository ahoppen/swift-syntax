%{
  # -*- mode: Swift -*-
  from gyb_syntax_support import *
  from gyb_syntax_support.Traits import TRAITS
  NODE_MAP = create_node_map()
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From Misc.swift.gyb.
//// Do Not Edit Directly!
//===---------- Misc.swift - Miscelaneous SwiftSyntax definitions ---------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension Syntax {
  public static var structure: SyntaxNodeStructure {
    return .choices([
      .node(UnknownSyntax.self),
      .node(TokenSyntax.self),
% for node in NON_BASE_SYNTAX_NODES:
%   if node.is_base():
      .node(Unknown${node.name}.self),
%   else:
      .node(${node.name}.self),
%   end
% end
    ])
  }
}

extension SyntaxKind {
  public var syntaxNodeType: SyntaxProtocol.Type {
    switch self {
    case .token: return TokenSyntax.self
    case .unknown: return UnknownSyntax.self
% for node in NON_BASE_SYNTAX_NODES:
    case .${node.swift_syntax_kind}: return ${node.name}.self
% end
    }
  }

  public var nameForDiagnostics: String? {
    switch self {
    case .unknown:
      return nil
    case .token:
      return "token"
% for node in NON_BASE_SYNTAX_NODES:
    case .${node.swift_syntax_kind}:
%   if node.name_for_diagnostics:
      return "${node.name_for_diagnostics}"
%   else:
      return nil
%   end
% end
    }
  }
}
